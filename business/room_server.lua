---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by b_ree.
--- DateTime: 2019/11/5 14:17
---

local skynet = require "skynet"
local queue = require "skynet.queue"
local protobuf = require "pb"
local const_code = require "const_code"
local const_cmd = require "const_cmd"
local room = require "room"
require "functions"

local pb_files = {
    "../proto/game.pb",
}

local cs = queue()
local CMD = {}

local _room_info = {}  --房间信息
local _player_tb = {}  --玩家列表

---@class RoomObj : Room
local RoomObj

skynet.init(function ()
    for _,v in ipairs(pb_files) do
        protobuf.loadfile(v)
    end
end)

skynet.start(function ()
    skynet.dispatch("lua", function (_, _, cmd, ...)
        local f = assert(CMD[cmd])
        skynet.ret(skynet.pack(f(...)))
    end)
end)

function CMD.start(_data, _recovery_data)
    _room_info = _data
    skynet.call(".room_mgr_server", "lua", "set_room_serve", _room_info.room_id, skynet.self()) --保存房间服务

    RoomObj = room.new(_data, _recovery_data)
end

--销毁房间
function CMD.room_destory()
    --退出房间服务
    RoomObj = nil
    skynet.call(".room_mgr_server", "lua", "remove_room_addr", _room_info.room_id, skynet.self()) --从房间服务管理中移除
    _room_info = nil
    _player_tb = nil
    skynet.exit()
end

--向牌桌中所有玩家/指定多个或一个玩家发送消息 群发推荐使用
function CMD.send_msg(_cmd, _msg, _uids, _exclude_uid)
    if not _uids then
        for uid, agent in pairs(_player_tb) do
            if _exclude_uid then
                if tonumber(uid) ~= tonumber(_exclude_uid) then
                    skynet.send(agent, "lua", "send", _cmd, _msg)
                end
            else
                skynet.send(agent, "lua", "send", _cmd, _msg)
            end
        end
    elseif type(_uids) == "table" then
        for uid, agent in pairs(_player_tb) do
            if _exclude_uid then
                if tonumber(uid) ~= tonumber(_exclude_uid) then
                    skynet.send(agent, "lua", "send", _cmd, _msg)
                end
            else
                skynet.send(agent, "lua", "send", _cmd, _msg)
            end
        end
    elseif type(_uids) == "number" then
        for uid, agent in pairs(_player_tb) do
            if tonumber(_uids) == tonumber(uid) then
                skynet.send(agent, "lua", "send", _cmd, _msg)
                break
            end
        end
    end
end

--指定agent发送消息 单发推荐使用
function CMD.send_msg_by_agent(_cmd, _msg, _agent)
    skynet.send(_agent, "lua", "send", _cmd, _msg)
end

function CMD.offline(_uid, _agent)
    if RoomObj then
        if _player_tb[_uid] == _agent then
            _player_tb[_uid] = nil
        end
        RoomObj:offline(_uid, _agent)
    end
end

--玩家进入房间
function CMD.enter_room(_uid, _agent, _data, _ip)
    local resp
    cs(function ()
        resp = RoomObj:enter_room(_agent, _data, _ip)
        if resp and resp.code then
            --非重连，只有加入房间成功，才视为房间内用户
            if resp.code == const_code.SUCESS then
                _player_tb[_uid] = _agent
            end
        else
            --重连
            _player_tb[_uid] = _agent
        end
    end)
    return resp
end

--玩家准备
function CMD.ready(_uid, _agent, _data)
    return RoomObj:ready(_uid, _data)
end

--退出房间
function CMD.exit_room(_uid, _agent, _data)
    return RoomObj:exit_room(_uid, _data)
end

--解散房间
function CMD.dismiss_room(_uid, _agent, _data)
    local resp = RoomObj:dismiss_room(_uid)
    if resp and resp.code == const_code.SUCESS then
        CMD.send_msg(const_cmd.DISMISS_ROOM, resp) --广播房间解散通知
    end
    return resp
end

--GM解散房间
function CMD.web_dismiss_room()
    local resp = RoomObj:dismiss_room(nil, const_code.DISMISS_ROOM_CODE.ADMIN)
    if resp and resp.code == const_code.SUCESS then
        CMD.send_msg(const_cmd.DISMISS_ROOM, resp) --广播房间解散通知
    end
    return resp
end

--叫主
function CMD.rob(_uid, _agent, _data)
    return RoomObj:rob(_uid, _data)
end

--埋底
function CMD.bury(_uid, _agent, _data)
    return RoomObj:bury(_uid, _data)
end

--反主
function CMD.rebel(_uid, _agent, _data)
    return RoomObj:rebel(_uid, _data)
end

--出牌
function CMD.discard(_uid, _agent, _data)
    return RoomObj:discard(_uid, _data)
end

--认输
function CMD.surrender(_uid, _agent, _data)
    return RoomObj:surrender(_uid, _data)
end

--投票
function CMD.player_vote(_uid, _agent, _data)
    return RoomObj:player_vote(_uid, _data)
end

--大喇叭
function CMD.speaker(_uid, _agent, _data)
    return RoomObj:speaker(_uid, _data)
end

--托管设置
function CMD.robot(_uid, _agent, _data)
    return RoomObj:robot(_uid, _data)
end

--查看埋底
function CMD.check_bury_card(_uid, _agent, _data)
    return RoomObj:check_bury_card(_uid, _data)
end

--查看捡分牌
function CMD.check_score_card(_uid, _agent, _data)
    return RoomObj:check_score_card(_uid, _data)
end

--查看上一轮牌
function CMD.check_prev_card(_uid, _agent, _data)
    return RoomObj:check_prev_card(_uid, _data)
end

--查询桌子状态
function CMD.table_status()
    if RoomObj then
        return RoomObj:table_status()
    else
        return {code=const_code.ROOM_NOT_EXIST}
    end
end