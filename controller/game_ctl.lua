---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by b_ree.
--- DateTime: 2019/11/4 11:06
---

local skynet = require "skynet"
local cjson = require "cjson"
local log = require "log"
local const_code = require "const_code"

local M = {}

function M:heart_beat(_room_server, _uid, _data)
    --log.log("c2s-heart_beat...[%d]", _uid)
    return {}
end

---@public 玩家进入房间
---@param _ nil 所在房间地址，注意：在该方法调用前，房间地址为nil
---@param _uid number 玩家uid
---@param _data table 数据
function M:enter_room(_, _uid, _data, _ip)
    local resp = {}
    local room_server = skynet.call(".room_mgr_server", "lua", "get_room_serve", _data.room_id)
    if room_server then
        resp = skynet.call(room_server, "lua", "enter_room", _uid, skynet.self(), _data, _ip)
        if not resp or resp.code == const_code.SUCESS then
            --断线重连 或 加入成功
            skynet.send(skynet.self(), "lua", "set_room_server", room_server)
        end
    else
        resp.code = const_code.ROOM_NOT_EXIST
        log.log("room does not exist, disconnect. room_id:[%s], uid:[%s]", _data.room_id, _uid)
        skynet.send(skynet.self(), "lua", "close")
    end
    return resp
end

---@public 玩家请求解散房间
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:dismiss_room(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "dismiss_room", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
    end
    return resp
end

---@public 玩家投票
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:player_vote(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "player_vote", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 玩家准备
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:ready(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "ready", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 玩家退出房间
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:exit_room(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "exit_room", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
    end
    return resp
end

---@public 叫主
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:rob(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "rob", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 埋底
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:bury(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "bury", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 反主
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:rebel(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "rebel", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 认输
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:surrender(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "surrender", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 玩家出牌操作
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:discard(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "discard", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 玩家发大喇叭
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:speaker(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "speaker", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 玩家设置托管状态
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:robot(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "robot", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 查看底牌
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:check_bury_card(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "check_bury_card", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 查看捡分牌
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:check_score_card(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "check_score_card", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

---@public 查看上一轮牌
---@param _room_server number 所在房间地址
---@param _uid number 玩家uid
---@param _data table 数据
function M:check_prev_card(_room_server, _uid, _data)
    local resp = {}
    if _room_server then
        resp = skynet.call(_room_server, "lua", "check_prev_card", _uid, skynet.self(), _data)
    else
        resp.code = const_code.ROOM_NOT_EXIST
        skynet.send(skynet.self(), "lua", "close")
        return
    end
    return resp
end

return M